name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            arch: x64
            cc: cl
            
          # macOS builds
          - os: macos-latest
            arch: x64
            cc: clang
          - os: macos-latest 
            arch: arm64
            cc: clang
            
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            cc: gcc
          - os: ubuntu-latest
            arch: arm64
            cc: gcc
            
    steps:
    - uses: actions/checkout@v4
    
    # 设置编译环境
    - name: Setup Build Environment
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install cmake
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install cmake
        fi

    # 配置 CMake
    - name: Configure CMake
      shell: bash
      run: |
        mkdir build
        cd build
        
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          cmake .. -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc
        else
          cmake .. -DCMAKE_C_COMPILER=${{ matrix.cc }}
        fi

    # 编译
    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release
        
    # 打包构建产物
    - name: Package
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp build/Release/rime-deploy.exe artifacts/rime-deploy-${{ matrix.os }}-${{ matrix.arch }}.exe
        else
          cp build/rime-deploy artifacts/rime-deploy-${{ matrix.os }}-${{ matrix.arch }}
        fi
        
    # 上传构建产物
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rime-deploy-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts/*
        
    # 创建 Release (仅在 tag 推送时)
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
